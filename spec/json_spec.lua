--luacheck: ignore describe it
describe('Json module', function()
  it('should load by lua', function()
    assert.has_no.errors(function() require('json') end)
    local json = require('json')
    assert.is_true(type(json) == 'table')
    assert.is_true(type(json.load) == 'function')
    assert.is_true(type(json.dump) == 'function')
  end)
  it('should return nil when load string with length < 2', function()
    local json = require('json')
    assert.are.equal(nil, json.load(''))
    assert.are.equal(nil, json.load('1'))
  end)

  it('should return empty table when load empty array', function()
    local json = require('json')
    local a = json.load('[]')
    assert.are.equal('table', type(a))
    assert.are.equal(nil, next(a))
  end)

  it('should return empty table when load empty object', function()
    local json = require('json')
    local t = json.load('{}')
    assert.are.equal('table', type(t))
    assert.are.equal(nil, next(t))
  end)

  it('should load simple array', function()
    local json = require('json')
    local a = json.load('[1, 2, "3", true]')
    assert.are.equal('table', type(a))
    assert.are.equal(4, #a)
    assert.are.equal(1, a[1])
    assert.are.equal(2, a[2])
    assert.are.equal("3", a[3])
    assert.are.equal(true, a[4])
  end)

  it('should load simple object', function()
    local json = require('json')
    local t = json.load('{"a":1, "b":2.1, "c":"", "d":false}')
    assert.are.equal('table', type(t))
    assert.are.equal(1, t.a)
    assert.are.equal(2.1, t.b)
    assert.are.equal('', t.c)
    assert.are.equal(false, t.d)
  end)

  it('should handle escaped characters', function()
    local json = require('json')
    local a = json.load([[ ["\"", "\\", "\/", "\b", "\f", "\n", "\r", "\t", "\u0021"] ]])
    assert.are.equal([["]], a[1])
    assert.are.equal([[\]], a[2])
    assert.are.equal([[/]], a[3])
    assert.are.equal('\b', a[4])
    assert.are.equal('\f', a[5])
    assert.are.equal('\n', a[6])
    assert.are.equal('\r', a[7])
    assert.are.equal('\t', a[8])
    assert.are.equal('!', a[9])
  end)

  it('should handle all number formats', function()
    local json = require('json')
    local a = json.load([[ [1000, -1000, 23.4, -23.4, 100e5, 1.99e3, -100E5, -100e-5, 100e+5, 1.99E3, 1.99E+3, -1.99e-3, -1.99e+3] ]])
    assert.are.equal(1000, a[1])
    assert.are.equal(-1000, a[2])
    assert.are.equal(23.4, a[3])
    assert.are.equal(-23.4, a[4])
    assert.are.equal(100e5, a[5])
    assert.are.equal(1.99e3, a[6])
    assert.are.equal(-100E5, a[7])
    assert.are.equal(-100e-5, a[8])
    assert.are.equal(100e5, a[9])
    assert.are.equal(1.99E3, a[10])
    assert.are.equal(1.99E3, a[11])
    assert.are.equal(-1.99e-3, a[12])
    assert.are.equal(-1.99e3, a[13])
    assert.are.equal(13, #a)
  end)

  it('should handle all boolean values', function()
    local json = require('json')
    local a = json.load([[ [true, false] ]])
    assert.are.equal(true, a[1])
    assert.are.equal(false, a[2])
    assert.are.equal(2, #a)
  end)

  it('should return nil when load numbers', function()
    -- number can convert to string so we can't rise arg error.
    local json = require('json')
    assert.are.equal(nil, json.load(1000))
    assert.are.equal(nil, json.load(100.0))
  end)

  it('should has errors when other types', function()
    local json = require('json')
    assert.has_error(function() json.load(true) end)
    assert.has_error(function() json.load(false) end)
    assert.has_error(function() json.load(function()end) end)
    assert.has_error(function() json.load({}) end)
  end)

  it('should handle nested objects', function()
    -- TODO: add tests here...
  end)
end)
